import { SignInMfaTotpHandlerResult } from '@nhost/core';
import { SignInEmailPasswordHandlerResult, SignInEmailPasswordState } from '@nhost/core';
interface SignInEmailPasswordHandler {
    (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>;
    /** @deprecated */
    (email?: unknown, password?: string): Promise<SignInEmailPasswordHandlerResult>;
}
interface SendMfaOtpHander {
    (otp: string): Promise<SignInMfaTotpHandlerResult>;
    /** @deprecated */
    (otp?: unknown): Promise<SignInMfaTotpHandlerResult>;
}
export interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {
    signInEmailPassword: SignInEmailPasswordHandler;
    sendMfaOtp: SendMfaOtpHander;
}
interface SignInEmailPasswordHook {
    (): SignInEmailPasswordHookResult;
    /** @deprecated */
    (email?: string, password?: string, otp?: string): SignInEmailPasswordHookResult;
}
/**
 * Use the hook `useSignInEmailPassword` to sign in a user using email and password.
 *
 * @example
 * ```tsx
 * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()
 *
 * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signInEmailPassword('joe@example.com','secret-password')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password
 */
export declare const useSignInEmailPassword: SignInEmailPasswordHook;
export {};
//# sourceMappingURL=useSignInEmailPassword.d.ts.map