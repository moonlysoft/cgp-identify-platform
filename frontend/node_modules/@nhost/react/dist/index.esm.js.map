{"version":3,"file":"index.esm.js","sources":["../src/client.ts","../src/provider.tsx","../src/useAuthInterpreter.ts","../src/useAccessToken.ts","../src/useNhostClient.ts","../src/useAddSecurityKey.ts","../src/useAuthenticated.ts","../src/useAuthenticationStatus.ts","../src/useAuthLoading.ts","../src/useChangeEmail.ts","../src/useChangePassword.ts","../src/useConfigMfa.ts","../src/useDecodedAccessToken.ts","../src/useFileUpload.ts","../src/useHasuraClaims.ts","../src/useHasuraClaim.ts","../src/useMultipleFilesUpload.ts","../src/useUserData.ts","../src/useNhostAuth.ts","../src/useNhostBackendUrl.ts","../src/useProviderLink.ts","../src/useResetPassword.ts","../src/useSendVerificationEmail.ts","../src/useSignInAnonymous.ts","../src/useSignInEmailPassword.ts","../src/useSignInEmailPasswordless.ts","../src/useSignInEmailSecurityKey.ts","../src/useSignInSmsPasswordless.ts","../src/useSignOut.ts","../src/useSignUpEmailPassword.ts","../src/useSignUpEmailSecurityKey.ts","../src/useUserAvatarUrl.ts","../src/useUserDefaultRole.ts","../src/useUserDisplayName.ts","../src/useUserEmail.ts","../src/useUserId.ts","../src/useUserIsAnonymous.ts","../src/useUserLocale.ts","../src/useUserRoles.ts"],"sourcesContent":["import { Subdomain } from '@nhost/nhost-js'\nimport { BackendUrl } from '@nhost/nhost-js'\nimport { NhostAuthConstructorParams, NhostClient as VanillaClient } from '@nhost/nhost-js'\n\nexport interface NhostReactClientConstructorParams\n  extends Partial<BackendUrl>,\n    Partial<Subdomain>,\n    Omit<NhostAuthConstructorParams, 'url' | 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaClient {\n  constructor(params: NhostReactClientConstructorParams) {\n    super({ ...params, start: false })\n  }\n}\n","import produce from 'immer'\nimport React, { createContext, PropsWithChildren, useEffect, useRef } from 'react'\n\nimport { AuthContext, NhostSession } from '@nhost/core'\nimport { NhostClient } from '@nhost/nhost-js'\nimport { useInterpret } from '@xstate/react'\n\nexport const NhostReactContext = createContext<NhostClient>({} as NhostClient)\nexport interface NhostReactProviderProps {\n  nhost: NhostClient\n  initial?: NhostSession\n}\n\nexport const NhostReactProvider: React.FC<PropsWithChildren<NhostReactProviderProps>> = ({\n  nhost,\n  initial,\n  ...props\n}) => {\n  const machine = nhost.auth.client.machine\n  const interpreter = useInterpret(machine, {\n    devTools: nhost.devTools,\n    context: produce<AuthContext>(machine.context, (ctx: AuthContext) => {\n      if (initial) {\n        ctx.user = initial.user\n        ctx.refreshToken.value = initial.refreshToken ?? null\n        ctx.accessToken.value = initial.accessToken ?? null\n        ctx.accessToken.expiresAt = new Date(Date.now() + initial.accessTokenExpiresIn * 1_000)\n      }\n    })\n  }).start()\n\n  // * Hook to send session update everytime the 'initial' props changed\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      if (initial) {\n        interpreter.send('SESSION_UPDATE', { data: { session: initial } })\n      }\n    }\n  }, [initial, interpreter])\n\n  nhost.auth.client.interpreter = interpreter\n  return <NhostReactContext.Provider value={nhost}>{props.children}</NhostReactContext.Provider>\n}\n","import { useContext } from 'react'\nimport { InterpreterFrom } from 'xstate'\n\nimport { AuthMachine } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/** @internal */\nexport const useAuthInterpreter = (): InterpreterFrom<AuthMachine> => {\n  const nhost = useContext(NhostReactContext)\n  const interpreter = nhost.auth?.client.interpreter\n  if (!interpreter) throw Error('No interpreter')\n  return interpreter\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAccessToken = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.context.accessToken.value)\n}\n","import { useContext } from 'react'\n\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * Use the hook `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const nhost = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-client\n */\nexport const useNhostClient = (): NhostClient => {\n  const nhost = useContext(NhostReactContext)\n  return nhost\n}\n","import { useState } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/core'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyHookResult extends ActionErrorState, ActionSuccessState {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\ninterface AddSecuritKeyHook {\n  (): AddSecuritKeyHookResult\n}\n\n/**\n * Use the hook `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-add-security-key\n */\nexport const useAddSecurityKey: AddSecuritKeyHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    setIsLoading(true)\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n    const { error } = result\n    if (error) {\n      setError(error)\n    }\n    setIsLoading(false)\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAuthenticated = () => {\n  const service = useAuthInterpreter()\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!service.status && service.state.matches({ authentication: 'signedIn' })\n  )\n  useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      const newValue = state.matches({ authentication: 'signedIn' })\n      setIsAuthenticated(newValue)\n    })\n    return subscription.unsubscribe\n  }, [service])\n  return isAuthenticated\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => ({\n      isAuthenticated: state.matches({ authentication: 'signedIn' }),\n      isLoading: state.hasTag('loading'),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({ authentication: { signedOut: 'failed' } })\n    }),\n    (a, b) => a.isAuthenticated === b.isAuthenticated && a.isLoading === b.isLoading\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * @deprecated\n * When using both {@link useAuthLoading} and {@link useAuthenticated} together, their initial state will change\n * three times:\n *\n * `(true, false)` -> `(false, false)` -> `(false, true)`\n *\n * Use {@link useAuthenticationStatus} instead.\n */\nexport const useAuthLoading = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.hasTag('loading'))\n}\n","import { useCallback, useMemo } from 'react'\n\nimport {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangeEmailHandler {\n  (email: string, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n}\n\nexport interface ChangeEmailHookResult extends ChangeEmailState {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail: ChangeEmailHandler\n}\n\n/**\n * Use the hook `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * console.log({ isLoading, needsEmailVerification, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail({\n *     email: 'new@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-email\n */\nexport function useChangeEmail(options?: ChangeEmailOptions): ChangeEmailHookResult\n\n/**\n * @deprecated\n */\nexport function useChangeEmail(email?: string, options?: ChangeEmailOptions): ChangeEmailHookResult\n\nexport function useChangeEmail(a?: string | ChangeEmailOptions, b?: ChangeEmailOptions) {\n  const stateEmail = useMemo(() => (typeof a === 'string' ? a : undefined), [a])\n  const stateOptions = useMemo(() => (typeof a !== 'string' ? a : b), [a, b])\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost])\n\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail: ChangeEmailHandler = useCallback(\n    async (valueEmail?: string | unknown, valueOptions = stateOptions) =>\n      changeEmailPromise(\n        service,\n        typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n        valueOptions\n      ),\n    [service, stateEmail, stateOptions]\n  )\n\n  return { changeEmail, isLoading, needsEmailVerification, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  createChangePasswordMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangePasswordHandler {\n  (password: string): Promise<ChangePasswordHandlerResult>\n  /** @deprecated */\n  (password?: unknown): Promise<ChangePasswordHandlerResult>\n}\n\nexport interface ChangePasswordHookResult extends ActionErrorState, ActionSuccessState {\n  /** Requests the password change. Returns a promise with the current context */\n  changePassword: ChangePasswordHandler\n}\n\ninterface ChangePasswordHook {\n  (): ChangePasswordHookResult\n  /** @deprecated */\n  (email?: string): ChangePasswordHookResult\n}\n\n/**\n * Use the hook `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-password\n */\nexport const useChangePassword: ChangePasswordHook = (statePassword?: string) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSuccess = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const changePassword: ChangePasswordHandler = (valuePassword?: string | unknown) =>\n    changePasswordPromise(\n      service,\n      typeof valuePassword === 'string' ? valuePassword : (statePassword as string)\n    )\n\n  return { changePassword, isLoading, isSuccess, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ConfigMfaState extends ActivateMfaState, GenerateQrCodeState {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n}\n\n// TODO documentation when available in Nhost Cloud - see changelog\nexport const useConfigMfa = (): ConfigMfaState => {\n  const nhost = useNhostClient()\n\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: string) => activateMfaPromise(service, code)\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isError,\n    error\n  }\n}\n","import jwt_decode from 'jwt-decode'\n\nimport { JWTClaims } from '@nhost/core'\n\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the hook `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-decoded-access-token\n */\nexport const useDecodedAccessToken = () => {\n  const jwt = useAccessToken()\n  return jwt ? jwt_decode<JWTClaims>(jwt) : null\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadHookResult extends FileUploadState {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the hook `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n * It has the same signature as `useFileUpload`.\n *\n * @example\n * ```tsx\n * const Item = ({itemRef}) => {\n *    const { name, progress} = useFileUploadItem(itemRef)\n *    return <li>{name} {progress}</li>\n * }\n *\n * const List = () => {\n *    const { list } = useMultipleFilesUpload()\n *    return <ul>\n *            {list.map((itemRef) => <Item key={item.id} itemRef={item} />)}\n *           </ul>\n * }\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadHookResult => {\n  const nhost = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(nhost, ref, {\n      file: params.file,\n      bucketId: params.bucketId || bucketId,\n      id,\n      name\n    })\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the hook `useFileUpload` to upload a file.\n *\n * @example\n * ```tsx\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-file-upload\n */\nexport const useFileUpload = (): FileUploadHookResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the hook `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claims\n */\nexport const useHasuraClaims = () => {\n  const claims = useDecodedAccessToken()\n  return claims?.['https://hasura.io/jwt/claims'] || null\n}\n","import { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the hook `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claim\n */\nexport const useHasuraClaim = (name: string) => {\n  const hasuraClaims = useHasuraClaims()\n  return hasuraClaims?.[name.startsWith('x-hasura-') ? name : `x-hasura-${name}`] || null\n}\n","import { useState } from 'react'\n\nimport {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesHookResult extends MultipleFilesUploadState {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the hook `useFileUpload` to upload multiple files.\n *\n * @example\n * ```tsx\n * const { upload, add, clear, progress, isUploaded, isUploading, files, isError, cancel } = useMultipleFilesUpload()\n *\n * const addFile = async (files: File | File[] | FileList) => {\n *   add({ files })\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault();\n *   upload()\n * }\n * ```\n * @docs https://docs.nhost.io/reference/react/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesHookResult => {\n  const nhost = useNhostClient()\n\n  const [errors, setErrors] = useState<FileItemRef[]>([])\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      setErrors(state.context.files.filter((ref) => ref.getSnapshot()?.context.error))\n    } else if ((state.matches('uploaded') || state.event.type === 'CLEAR') && errors.length > 0) {\n      setErrors([])\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(nhost, service, params)\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-data\n */\nexport const useUserData = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b))\n  )\n}\n","import { useMemo } from 'react'\n\nimport { useAuthenticationStatus } from './useAuthenticationStatus'\nimport { useUserData } from './useUserData'\n\n/**\n * @deprecated\n * This hook ensures backward compatibility with `@nhost/react-auth`, which is deprecated.\n */\nexport const useNhostAuth = () => {\n  const { isLoading, isAuthenticated } = useAuthenticationStatus()\n  const user = useUserData()\n  return useMemo(() => ({ isLoading, isAuthenticated, user }), [isLoading, isAuthenticated, user])\n}\n","import { useContext } from 'react'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * @deprecated Nhost services can now be split to subdomains to improve performance with CDN. Use `nhost.auth.url` or `nhost.storage.url` instead.\n * Use the hook `useNhostBackendUrl` to get the Nhost backend URL.\n *\n * @example\n * ```tsx\n * const nhostBackendUrl = useNhostBackendUrl()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-backend-url\n */\nexport const useNhostBackendUrl = () => {\n  const nhost = useContext(NhostReactContext)\n  return nhost.auth.client.backendUrl.replace('/v1/auth', '')\n}\n","import { useContext, useEffect, useState } from 'react'\n\nimport { encodeQueryParameters, Provider, ProviderOptions, rewriteRedirectTo } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/**\n *  Use the hook `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/react';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (options?: ProviderOptions) => {\n  /**\n   * @internal When using Nextjs or any SSR framework, nhost.auth.client.clientUrl will be set to `undefined`\n   * as its value is set to window.location.origin.\n   * This is because the request context is not available when setting up the client `new NhostClient()` outside of\n   * the React/Nextjs context.\n   */\n  const [isSSR, setIsSSR] = useState(true)\n\n  useEffect(() => {\n    setIsSSR(false)\n  }, [])\n\n  const nhost = useContext(NhostReactContext)\n\n  return new Proxy({} as Record<Provider, string>, {\n    get(_, provider: string) {\n      return encodeQueryParameters(\n        `${nhost.auth.client.backendUrl}/signin/provider/${provider}`,\n        rewriteRedirectTo(isSSR ? undefined : nhost.auth.client.clientUrl, options as any)\n      )\n    }\n  })\n}\n","import { useMemo } from 'react'\n\nimport {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordHandler {\n  (email: string, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n}\n\nexport interface ResetPasswordHookResult extends ResetPasswordState {\n  /**\n   * Sends an email with a temporary connection link. Returns a promise with the current context\n   */\n  resetPassword: ResetPasswordHandler\n}\n\ninterface ResetPasswordHook {\n  (options?: ResetPasswordOptions): ResetPasswordHookResult\n  /** @deprecated */\n  (email?: string, options?: ResetPasswordOptions): ResetPasswordHookResult\n}\n\n/**\n * Use the hook `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the hook `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com', {\n *     redirectTo: 'http://localhost:3000/settings/change-password'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-reset-password\n */\nexport const useResetPassword: ResetPasswordHook = (\n  a?: string | ResetPasswordOptions,\n  b?: ResetPasswordOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSent = useSelector(service, (state) => state.matches('idle.success'))\n\n  const resetPassword: ResetPasswordHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    resetPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { resetPassword, isLoading, isSent, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailHandler {\n  (\n    email: string,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n}\n\nexport interface SendVerificationEmailHookResult extends SendVerificationEmailState {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail: SendVerificationEmailHandler\n}\n\ninterface SendVerificationEmailHook {\n  (options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n  /** @deprecated */\n  (email?: string, options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n}\n\n/**\n * Use the hook `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-send-verification-email\n */\nexport const useSendVerificationEmail: SendVerificationEmailHook = (\n  a?: string | SendVerificationEmailOptions,\n  b?: SendVerificationEmailOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const sendEmail: SendVerificationEmailHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    sendVerificationEmailPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { sendEmail, isLoading, isSent, isError, error }\n}\n","import { signInAnonymousPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isError = useSelector(service, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  return { accessToken, error, isError, isLoading, isSuccess, signInAnonymous, user }\n}\n","import { SignInMfaTotpHandlerResult } from '@nhost/core'\nimport {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  signInMfaTotpPromise\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordHandler {\n  (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, password?: string): Promise<SignInEmailPasswordHandlerResult>\n}\n\ninterface SendMfaOtpHander {\n  (otp: string): Promise<SignInMfaTotpHandlerResult>\n  /** @deprecated */\n  (otp?: unknown): Promise<SignInMfaTotpHandlerResult>\n}\n\nexport interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {\n  signInEmailPassword: SignInEmailPasswordHandler\n  sendMfaOtp: SendMfaOtpHander\n}\n\ninterface SignInEmailPasswordHook {\n  (): SignInEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, otp?: string): SignInEmailPasswordHookResult\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the hook `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password\n */\nexport const useSignInEmailPassword: SignInEmailPasswordHook = (\n  stateEmail?: string,\n  statePassword?: string,\n  stateOtp?: string\n) => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword: SignInEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword?: string\n  ) =>\n    signInEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : stateEmail!,\n      typeof valuePassword === 'string' ? valuePassword : statePassword!\n    )\n\n  const sendMfaOtp: SendMfaOtpHander = (valueOtp?: string | unknown) =>\n    signInMfaTotpPromise(service, typeof valueOtp === 'string' ? valueOtp : stateOtp!)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const needsMfaOtp = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'needsMfa' } }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service, (state) => state.context.mfa)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  SignInEmailPasswordState\n} from '@nhost/core'\nimport { signInEmailPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordlessHandler {\n  (email: string, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\nexport interface SignInEmailPasswordlessHookResult extends SignInEmailPasswordState {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless: SignInEmailPasswordlessHandler\n}\n\n/**\n * Use the hook `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-passwordless\n */\nexport function useSignInEmailPasswordless(\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\n/**\n * @deprecated\n */\nexport function useSignInEmailPasswordless(\n  email?: string,\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\nexport function useSignInEmailPasswordless(\n  a?: string | PasswordlessOptions,\n  b?: PasswordlessOptions\n) {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a === 'string' ? b : a\n  const service = useAuthInterpreter()\n\n  const signInEmailPasswordless: SignInEmailPasswordlessHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    signInEmailPasswordlessPromise(\n      service,\n      (typeof valueEmail === 'string' ? valueEmail : stateEmail) as string,\n      valueOptions\n    )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) => state.matches('registration.passwordlessEmail'))\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: string): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends SignInSecurityKeyPasswordlessState {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessHook {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the hook `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (email: string) =>\n    signInEmailSecurityKeyPromise(service, email)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import { useState } from 'react'\n\nimport {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  SignInSmsPasswordlessState\n} from '@nhost/core'\nimport { signInSmsPasswordlessOtpPromise, signInSmsPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (phoneNumber: string, options?: PasswordlessOptions): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (phoneNumber: string, code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessHookResult extends SignInSmsPasswordlessState {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the hook `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: PasswordlessOptions\n): SignInSmsPasswordlessHookResult {\n  const service = useAuthInterpreter()\n  const [_phoneNumber, setPhoneNumber] = useState('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: string,\n    valueOptions = stateOptions\n  ) => {\n    setPhoneNumber(phoneNumber)\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions)\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: string[]) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code)\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code)\n  }\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignOut` to sign out the user.\n *\n * @example\n * ```tsx\n * import { useSignOut, useAuthenticated } from '@nhost/react'\n *\n * const Component = () => {\n *   const { signOut } = useSignOut()\n *   const isAuthenticated = useAuthenticated()\n *\n *   if (isAuthenticated) {\n *     return (\n *       <button onClick={() => signOut()}>Sign Out</button>\n *     )\n *   }\n *\n *   return <div>Not authenticated</div>\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-out\n */\nexport const useSignOut = (stateAll: boolean = false) => {\n  const service = useAuthInterpreter()\n  const signOut = (valueAll?: boolean | unknown) =>\n    signOutPromise(service, typeof valueAll === 'boolean' ? valueAll : stateAll)\n\n  const isSuccess = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'success' } }),\n    (a, b) => a === b\n  )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.signout || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  return { signOut, isSuccess, error }\n}\n","import { signUpEmailPasswordPromise, SignUpEmailPasswordState, SignUpOptions } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>\n\ninterface SignUpEmailPasswordHandler {\n  (\n    email: string,\n    password: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    password?: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\nexport interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword: SignUpEmailPasswordHandler\n}\n\ninterface SignUpEmailPasswordHook {\n  (options?: SignUpOptions): SignUpEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, options?: SignUpOptions): SignUpEmailPasswordHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword: SignUpEmailPasswordHook = (\n  a?: string | SignUpOptions,\n  b?: string,\n  c?: SignUpOptions\n) => {\n  const stateEmail: string | undefined = typeof a === 'string' ? a : undefined\n  const statePassword: string | undefined = typeof b === 'string' ? b : undefined\n  const stateOptions = c || (typeof a !== 'string' ? a : undefined)\n\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.emailPassword'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailPassword: SignUpEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword = statePassword,\n    valueOptions = stateOptions\n  ) =>\n    signUpEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valuePassword as string,\n      valueOptions\n    )\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  }\n}\n","import {\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (email: string, options?: SignUpSecurityKeyOptions): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends SignUpSecurityKeyState {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyHook {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailSecurityKey` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKeyEmail: SignUpSecurityKeyHook = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (email, options = hookOptions) =>\n    signUpEmailSecurityKeyPromise(service, email, options)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-avatar-url\n */\nexport const useUserAvatarUrl = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserAvatarUrl} instead */\nexport const useAvatarUrl = useUserAvatarUrl\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-default-role\n */\nexport const useUserDefaultRole = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDefaultRole} instead */\nexport const useDefaultRole = useUserDefaultRole\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-display-name\n */\nexport const useUserDisplayName = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDisplayName} instead */\nexport const useDisplayName = useUserDisplayName\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-email\n */\nexport const useUserEmail = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserEmail} instead */\nexport const useEmail = useUserEmail\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-id\n */\nexport const useUserId = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserIsAnonymous} instead */\nexport const useIsAnonymous = useUserIsAnonymous\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-locale\n */\nexport const useUserLocale = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-roles\n */\nexport const useUserRoles = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.roles || [],\n    (a, b) => a.every((i) => b.includes(i) && b.every((i) => a.includes(i)))\n  )\n}\n"],"names":["VanillaClient"],"mappings":"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"}