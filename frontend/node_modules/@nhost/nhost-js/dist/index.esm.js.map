{"version":3,"file":"index.esm.js","sources":["../src/clients/functions.ts","../src/clients/graphql.ts","../src/utils/helpers.ts","../src/core/nhost-client.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders, AxiosResponse } from 'axios'\n\nimport { FunctionCallResponse } from '../utils/types'\nexport interface NhostFunctionsConstructorParams {\n  /**\n   * Serverless Functions endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function.\n   *\n   * @example\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<T = unknown, D = any>(\n    url: string,\n    data: D,\n    config?: AxiosRequestConfig\n  ): Promise<FunctionCallResponse<T>> {\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    let res\n    try {\n      res = await this.instance.post<T, AxiosResponse<T>, D>(url, data, { ...config, headers })\n    } catch (error) {\n      if (error instanceof Error) {\n        return { res: null, error }\n      }\n    }\n\n    if (!res) {\n      return {\n        res: null,\n        error: new Error('Unable to make post request to funtion')\n      }\n    }\n\n    return { res, error: null }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): AxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios'\nimport { DocumentNode, print } from 'graphql'\n\nimport { GraphqlRequestResponse, GraphqlResponse } from '../utils/types'\n\nexport interface NhostGraphqlConstructorParams {\n  /**\n   * GraphQL endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  private url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/request\n   */\n  async request<T = any, V = any>(\n    document: string | DocumentNode,\n    variables?: V,\n    config?: AxiosRequestConfig\n  ): Promise<GraphqlRequestResponse<T>> {\n    // add auth headers if any\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    try {\n      const operationName = ''\n      const res = await this.instance.post<GraphqlResponse<T>>(\n        '',\n        {\n          operationName: operationName || undefined,\n          query: typeof document === 'string' ? document : print(document),\n          variables\n        },\n        { ...config, headers }\n      )\n\n      const responseData = res.data\n      const { data } = responseData\n\n      if (responseData.errors) {\n        return {\n          data: null,\n          error: responseData.errors\n        }\n      }\n\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: new Error('incorrect response data from GraphQL server')\n        }\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (error instanceof Error) {\n        return { data: null, error }\n      }\n      console.error(error)\n      return {\n        data: null,\n        error: new Error('Unable to get do GraphQL request')\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl` to get the GraphQL URL.\n   *\n   * @example\n   * ```ts\n   * const url = nhost.graphql.getUrl();\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/get-url\n   */\n  getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): AxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { NhostClientConstructorParams } from './types'\n\nconst LOCALHOST_REGEX = /^localhost(:\\d+)*$/g\n\n/**\n * `backendUrl` should now be used only when self-hosting\n * `subdomain` and `region` should be used instead when using the Nhost platform\n * `\n * @param backendOrSubdomain\n * @param service\n * @returns\n */\nexport function urlFromParams(\n  backendOrSubdomain: Pick<NhostClientConstructorParams, 'region' | 'subdomain' | 'backendUrl'>,\n  service: string\n) {\n  const { backendUrl, subdomain, region } = backendOrSubdomain\n\n  if (!backendUrl && !subdomain) {\n    throw new Error('Either `backendUrl` or `subdomain` must be set.')\n  }\n\n  if (backendUrl) {\n    return `${backendUrl}/v1/${service}`\n  }\n\n  // to make TS happy\n  if (!subdomain) {\n    throw new Error('`subdomain` must be set if `backendUrl` is not set.')\n  }\n\n  // check if subdomain is localhost[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound && subdomainLocalhostFound.length > 0) {\n    const localhostFound = subdomainLocalhostFound[0]\n\n    // no port specified, use standard port 1337\n    if (localhostFound === 'localhost') {\n      return `http://localhost:1337/v1/${service}`\n    }\n\n    // port specified\n    return `http://${localhostFound}/v1/${service}`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { NhostFunctionsClient } from '../clients/functions'\nimport { NhostGraphqlClient } from '../clients/graphql'\nimport { urlFromParams } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   * Nhost Client\n   *\n   * @example\n   * ```ts\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorageGetter,\n    clientStorageSetter,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    this.auth = new HasuraAuthClient({\n      url: urlFromParams(urlParams, 'auth'),\n      refreshIntervalTime,\n      clientStorageGetter,\n      clientStorageSetter,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start\n    })\n\n    this.storage = new HasuraStorageClient({\n      url: urlFromParams(urlParams, 'storage'),\n      adminSecret\n    })\n\n    this.functions = new NhostFunctionsClient({\n      url: urlFromParams(urlParams, 'functions'),\n      adminSecret\n    })\n\n    this.graphql = new NhostGraphqlClient({\n      url: urlFromParams(urlParams, 'graphql'),\n      adminSecret\n    })\n\n    // * Set current token if token is already accessable\n    this.storage.setAccessToken(this.auth.getAccessToken())\n    this.functions.setAccessToken(this.auth.getAccessToken())\n    this.graphql.setAccessToken(this.auth.getAccessToken())\n\n    this.auth.client?.onStart(() => {\n      // * Set access token when signing out\n      this.auth.onAuthStateChanged((_event, session) => {\n        if (_event === 'SIGNED_OUT') {\n          this.storage.setAccessToken(undefined)\n          this.functions.setAccessToken(undefined)\n          this.graphql.setAccessToken(undefined)\n        }\n      })\n\n      // * Update access token for clients, including when signin in\n      this.auth.onTokenChanged((session) => {\n        this.storage.setAccessToken(session?.accessToken)\n        this.functions.setAccessToken(session?.accessToken)\n        this.graphql.setAccessToken(session?.accessToken)\n      })\n    })\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n}\n","import { NhostClientConstructorParams } from './utils/types'\nimport { NhostClient } from './core'\n\nconst createClient = (config: NhostClientConstructorParams) => new NhostClient(config)\n\nexport * from './clients'\nexport * from './core'\nexport * from './utils/types'\nexport { createClient }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBO,MAAM,qBAAqB;AAAA,EAKhC,YAAY,QAAyC;AAC7C,UAAA,EAAE,KAAK,gBAAgB;AAE7B,SAAK,cAAc;AACnB,SAAK,cAAc;AACd,SAAA,WAAW,MAAM,OAAO;AAAA,MAC3B,SAAS;AAAA,IAAA,CACV;AAAA,EACH;AAAA,QAYM,KACJ,KACA,MACA,QACkC;AAClC,UAAM,UAAU,kCACX,KAAK,2BAA2B,IAChC,iCAAQ;AAGT,QAAA;AACA,QAAA;AACI,YAAA,MAAM,KAAK,SAAS,KAA6B,KAAK,MAAM,iCAAK,SAAL,EAAa,QAAA,EAAS;AAAA,aACjF;AACP,UAAI,iBAAiB,OAAO;AACnB,eAAA,EAAE,KAAK,MAAM;MACtB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK;AACD,aAAA;AAAA,QACL,KAAK;AAAA,QACL,OAAO,IAAI,MAAM,wCAAwC;AAAA,MAAA;AAAA,IAE7D;AAEO,WAAA,EAAE,KAAK,OAAO;EACvB;AAAA,EAYA,eAAe,aAAiC;AAC9C,QAAI,CAAC,aAAa;AAChB,WAAK,cAAc;AACnB;AAAA,IACF;AAEA,SAAK,cAAc;AAAA,EACrB;AAAA,EAEQ,6BAAkD;AACxD,QAAI,KAAK,aAAa;AACb,aAAA;AAAA,QACL,yBAAyB,KAAK;AAAA,MAAA;AAAA,IAElC;AACA,QAAI,KAAK,aAAa;AACb,aAAA;AAAA,QACL,eAAe,UAAU,KAAK;AAAA,MAAA;AAAA,IAElC;AACA,WAAO;EACT;AACF;ACpFO,MAAM,mBAAmB;AAAA,EAM9B,YAAY,QAAuC;AAC3C,UAAA,EAAE,KAAK,gBAAgB;AAE7B,SAAK,MAAM;AACX,SAAK,cAAc;AACnB,SAAK,cAAc;AACd,SAAA,WAAW,MAAM,OAAO;AAAA,MAC3B,SAAS;AAAA,IAAA,CACV;AAAA,EACH;AAAA,QAoBM,QACJ,UACA,WACA,QACoC;AAEpC,UAAM,UAAU,kCACX,KAAK,2BAA2B,IAChC,iCAAQ;AAGT,QAAA;AACF,YAAM,gBAAgB;AACtB,YAAM,MAAM,MAAM,KAAK,SAAS,KAC9B,IACA;AAAA,QACE,eAAe,iBAAiB;AAAA,QAChC,OAAO,OAAO,aAAa,WAAW,WAAW,MAAM,QAAQ;AAAA,QAC/D;AAAA,MAEF,GAAA,iCAAK,SAAL,EAAa,QAAA,EACf;AAEA,YAAM,eAAe,IAAI;AACzB,YAAM,EAAE,SAAS;AAEjB,UAAI,aAAa,QAAQ;AAChB,eAAA;AAAA,UACL,MAAM;AAAA,UACN,OAAO,aAAa;AAAA,QAAA;AAAA,MAExB;AAEI,UAAA,OAAO,SAAS,YAAY,MAAM,QAAQ,IAAI,KAAK,SAAS,MAAM;AAC7D,eAAA;AAAA,UACL,MAAM;AAAA,UACN,OAAO,IAAI,MAAM,6CAA6C;AAAA,QAAA;AAAA,MAElE;AAEO,aAAA,EAAE,MAAM,OAAO;aACf;AACP,UAAI,iBAAiB,OAAO;AACnB,eAAA,EAAE,MAAM,MAAM;MACvB;AACA,cAAQ,MAAM,KAAK;AACZ,aAAA;AAAA,QACL,MAAM;AAAA,QACN,OAAO,IAAI,MAAM,kCAAkC;AAAA,MAAA;AAAA,IAEvD;AAAA,EACF;AAAA,EAYA,SAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EAYA,eAAe,aAAiC;AAC9C,QAAI,CAAC,aAAa;AAChB,WAAK,cAAc;AACnB;AAAA,IACF;AAEA,SAAK,cAAc;AAAA,EACrB;AAAA,EAEQ,6BAAkD;AACxD,QAAI,KAAK,aAAa;AACb,aAAA;AAAA,QACL,yBAAyB,KAAK;AAAA,MAAA;AAAA,IAElC;AACA,QAAI,KAAK,aAAa;AACb,aAAA;AAAA,QACL,eAAe,UAAU,KAAK;AAAA,MAAA;AAAA,IAElC;AACA,WAAO;EACT;AACF;ACvJA,MAAM,kBAAkB;AAUjB,uBACL,oBACA,SACA;AACM,QAAA,EAAE,YAAY,WAAW,WAAW;AAEtC,MAAA,CAAC,cAAc,CAAC,WAAW;AACvB,UAAA,IAAI,MAAM,iDAAiD;AAAA,EACnE;AAEA,MAAI,YAAY;AACd,WAAO,GAAG,iBAAiB;AAAA,EAC7B;AAGA,MAAI,CAAC,WAAW;AACR,UAAA,IAAI,MAAM,qDAAqD;AAAA,EACvE;AAGM,QAAA,0BAA0B,UAAU,MAAM,eAAe;AAC3D,MAAA,2BAA2B,wBAAwB,SAAS,GAAG;AACjE,UAAM,iBAAiB,wBAAwB;AAG/C,QAAI,mBAAmB,aAAa;AAClC,aAAO,4BAA4B;AAAA,IACrC;AAGA,WAAO,UAAU,qBAAqB;AAAA,EACxC;AAEA,MAAI,CAAC,QAAQ;AACL,UAAA,IAAI,MAAM,uEAAuE;AAAA,EACzF;AAEO,SAAA,WAAW,aAAa,WAAW;AAC5C;AC3CO,MAAM,YAAY;AAAA,EAkBvB,YAAY,IAYqB;AAZrB,iBACV;AAAA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,QAVE,IAWP,sBAXO,IAWP;AAAA,MAVH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;;AAGK,SAAA,OAAO,IAAI,iBAAiB;AAAA,MAC/B,KAAK,cAAc,WAAW,MAAM;AAAA,MACpC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAEI,SAAA,UAAU,IAAI,oBAAoB;AAAA,MACrC,KAAK,cAAc,WAAW,SAAS;AAAA,MACvC;AAAA,IAAA,CACD;AAEI,SAAA,YAAY,IAAI,qBAAqB;AAAA,MACxC,KAAK,cAAc,WAAW,WAAW;AAAA,MACzC;AAAA,IAAA,CACD;AAEI,SAAA,UAAU,IAAI,mBAAmB;AAAA,MACpC,KAAK,cAAc,WAAW,SAAS;AAAA,MACvC;AAAA,IAAA,CACD;AAGD,SAAK,QAAQ,eAAe,KAAK,KAAK,gBAAgB;AACtD,SAAK,UAAU,eAAe,KAAK,KAAK,gBAAgB;AACxD,SAAK,QAAQ,eAAe,KAAK,KAAK,gBAAgB;AAEjD,gBAAA,KAAK,WAAL,oBAAa,QAAQ,MAAM;AAE9B,WAAK,KAAK,mBAAmB,CAAC,QAAQ,YAAY;AAChD,YAAI,WAAW,cAAc;AACtB,eAAA,QAAQ,eAAe,MAAS;AAChC,eAAA,UAAU,eAAe,MAAS;AAClC,eAAA,QAAQ,eAAe,MAAS;AAAA,QACvC;AAAA,MAAA,CACD;AAGI,WAAA,KAAK,eAAe,CAAC,YAAY;AAC/B,aAAA,QAAQ,eAAe,mCAAS,WAAW;AAC3C,aAAA,UAAU,eAAe,mCAAS,WAAW;AAC7C,aAAA,QAAQ,eAAe,mCAAS,WAAW;AAAA,MAAA,CACjD;AAAA,IAAA;AAEH,SAAK,eAAe;AACpB,SAAK,WAAW;AAAA,EAClB;AAAA,MAEI,cAAkC;AACpC,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,YAAY,UAA8B;AAC5C,SAAK,eAAe;AACf,SAAA,QAAQ,eAAe,QAAQ;AAAA,EAItC;AACF;ACnGA,MAAM,eAAe,CAAC,WAAyC,IAAI,YAAY,MAAM;;"}