import { AuthClient } from '../client';
import { ErrorPayload } from '../errors';
import { SendVerificationEmailOptions, SendVerificationEmailResponse } from '../types';
export declare type SendVerificationEmailContext = {
    error: ErrorPayload | null;
};
export declare type SendVerificationEmailEvents = {
    type: 'REQUEST';
    email?: string;
    options?: SendVerificationEmailOptions;
} | {
    type: 'SUCCESS';
} | {
    type: 'ERROR';
    error: ErrorPayload | null;
};
export declare type SendVerificationEmailServices = {
    request: {
        data: SendVerificationEmailResponse;
    };
};
export declare type SendVerificationEmailMachine = ReturnType<typeof createSendVerificationEmailMachine>;
export declare const createSendVerificationEmailMachine: ({ backendUrl, clientUrl }: AuthClient) => import("xstate").StateMachine<SendVerificationEmailContext, any, {
    type: 'REQUEST';
    email?: string | undefined;
    options?: SendVerificationEmailOptions | undefined;
} | {
    type: 'SUCCESS';
} | {
    type: 'ERROR';
    error: ErrorPayload | null;
}, {
    value: any;
    context: SendVerificationEmailContext;
}, import("xstate").BaseActionObject, SendVerificationEmailServices, import("xstate").ResolveTypegenMeta<import("./send-verification-email.typegen").Typegen0, {
    type: 'REQUEST';
    email?: string | undefined;
    options?: SendVerificationEmailOptions | undefined;
} | {
    type: 'SUCCESS';
} | {
    type: 'ERROR';
    error: ErrorPayload | null;
}, import("xstate").BaseActionObject, SendVerificationEmailServices>>;
//# sourceMappingURL=send-verification-email.d.ts.map