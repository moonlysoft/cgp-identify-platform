export declare const NETWORK_ERROR_CODE = 0;
export declare const OTHER_ERROR_CODE = 1;
export declare const VALIDATION_ERROR_CODE = 10;
export declare const STATE_ERROR_CODE = 20;
export declare type ErrorPayload = {
    error: string;
    status: number;
    message: string;
};
/**
 * @internal
 * Adds a standard error payload to any JS Error, or convert a standard error payload into a JS Error.
 * Allows xstate to use `throw` instead of `Promise.reject` to propagate errors.
 * See https://github.com/statelyai/xstate/issues/3037
 */
export declare class CodifiedError extends Error {
    error: ErrorPayload;
    constructor(original: Error | ErrorPayload);
}
export declare type ValidationErrorPayload = ErrorPayload & {
    status: typeof VALIDATION_ERROR_CODE;
};
export declare const INVALID_EMAIL_ERROR: ValidationErrorPayload;
export declare const INVALID_MFA_TYPE_ERROR: ValidationErrorPayload;
export declare const INVALID_MFA_CODE_ERROR: ValidationErrorPayload;
export declare const INVALID_PASSWORD_ERROR: ValidationErrorPayload;
export declare const INVALID_PHONE_NUMBER_ERROR: ValidationErrorPayload;
export declare const INVALID_MFA_TICKET_ERROR: ValidationErrorPayload;
export declare const NO_MFA_TICKET_ERROR: ValidationErrorPayload;
export declare const NO_REFRESH_TOKEN: ValidationErrorPayload;
export declare const TOKEN_REFRESHER_RUNNING_ERROR: ErrorPayload;
export declare const USER_ALREADY_SIGNED_IN: ErrorPayload;
export declare const USER_UNAUTHENTICATED: ErrorPayload;
export declare const USER_NOT_ANONYMOUS: ErrorPayload;
export declare const EMAIL_NEEDS_VERIFICATION: ErrorPayload;
export declare const INVALID_REFRESH_TOKEN: {
    status: number;
    error: string;
    message: string;
};
//# sourceMappingURL=errors.d.ts.map