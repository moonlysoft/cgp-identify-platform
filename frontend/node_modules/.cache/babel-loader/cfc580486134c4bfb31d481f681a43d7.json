{"ast":null,"code":"var _jsxFileName = \"/Users/nelu/Desktop/Stuff/Projects/cgp-identify-platform/frontend/src/components/widgets/Time.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Button from '../elements/Button';\nimport Card from '../elements/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\nconst Time = _ref => {\n  _s();\n  let {\n    workMin,\n    breakMin,\n    setBreakMin,\n    setWorkMin\n  } = _ref;\n  const [isPaused, setIsPaused] = useState(true);\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const [mode, setMode] = useState(\"work\");\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n  const initTimer = () => {\n    setSecondsLeft(workMin * 60);\n  };\n  const switchMode = () => {\n    const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n    const nextSeconds = (nextMode === 'work' ? workMin : breakMin) * 60;\n    setMode(nextMode);\n    modeRef.current = nextMode;\n    setSecondsLeft(nextSeconds);\n    secondsLeftRef.current = nextSeconds;\n  };\n  useEffect(() => {\n    initTimer();\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n      tick();\n      console.log(tick());\n      console.log(secondsLeftRef.current);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [workMin, breakMin, setBreakMin, setWorkMin]);\n  const totalSeconds = mode === 'work' ? workMin * 60 : breakMin * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds) * 100;\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) {\n    seconds = '0' + seconds;\n  }\n  console.log(minutes, seconds);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n          value: percentage\n          // text={`${66}%`} \n          ,\n          text: minutes + \":\" + seconds,\n          styles: buildStyles({\n            rotation: 0.5,\n            strokeLinecap: 'butt',\n            pathTransitionDuration: 0.5,\n            pathColor: red,\n            textColor: '#f88',\n            trailColor: '#d6d6d6',\n            backgroundColor: '#3e98c7'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center mt-6 space-x-4\",\n        children: isPaused ? /*#__PURE__*/_jsxDEV(Button, {\n          className: \"py-1 px-6\",\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          className: \"py-1 px-6\",\n          children: \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Time, \"Q1e+EGzETpzfYSeb3dWZtR8KwZA=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["React","useState","useEffect","useRef","CircularProgressbar","buildStyles","Button","Card","red","green","Time","workMin","breakMin","setBreakMin","setWorkMin","isPaused","setIsPaused","secondsLeft","setSecondsLeft","mode","setMode","secondsLeftRef","isPausedRef","modeRef","tick","current","initTimer","switchMode","nextMode","nextSeconds","interval","setInterval","console","log","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","rotation","strokeLinecap","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor"],"sources":["/Users/nelu/Desktop/Stuff/Projects/cgp-identify-platform/frontend/src/components/widgets/Time.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { CircularProgressbar, buildStyles  } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Button from '../elements/Button';\nimport Card from '../elements/Card';\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nconst Time = ({ workMin, breakMin, setBreakMin, setWorkMin}) => {\n    \n    const [isPaused, setIsPaused] = useState(true);\n    const [secondsLeft, setSecondsLeft] = useState(0);\n    const [mode, setMode] = useState(\"work\");\n    const secondsLeftRef = useRef(secondsLeft);\n    const isPausedRef = useRef(isPaused);\n    const modeRef = useRef(mode);\n\n    \n    function tick(){\n        secondsLeftRef.current--;\n        setSecondsLeft(secondsLeftRef.current);\n    }\n\n    const initTimer = () => {\n        setSecondsLeft(workMin*60);\n    }\n\n    const switchMode = () => {\n        const nextMode = modeRef.current === 'work'? 'break': 'work';\n        const nextSeconds = (nextMode ==='work' ? workMin : breakMin)*60;\n        setMode(nextMode);\n        modeRef.current = nextMode;\n        setSecondsLeft(nextSeconds);\n        secondsLeftRef.current = nextSeconds;\n    }\n\n    useEffect(() => {\n        initTimer();\n\n        const interval = setInterval(()=>{\n            if(isPausedRef.current) {\n                return;\n            }\n\n            if(secondsLeftRef.current === 0){\n               return switchMode();\n            }\n\n            tick();\n            console.log(tick())\n            console.log(secondsLeftRef.current)\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [workMin, breakMin, setBreakMin, setWorkMin])\n\n    const totalSeconds = mode === 'work'? workMin*60 : breakMin*60\n    const percentage = Math.round(secondsLeft/totalSeconds)*100;\n\n    const minutes = Math.floor(secondsLeft/60);\n    let seconds = secondsLeft%60;\n    if(seconds<10) {\n        seconds= '0' + seconds;\n    }\n\n    console.log(minutes,seconds)\n\n\n    return (\n        <>\n            <Card>\n                <div>\n                    <CircularProgressbar \n                        value={percentage} \n                        // text={`${66}%`} \n                        text={minutes+\":\"+seconds}\n                        styles={buildStyles({\n                        \n                        rotation: 0.5,                        \n                        strokeLinecap: 'butt',                                            \n                        pathTransitionDuration: 0.5,                    \n                        pathColor: red,\n                        textColor: '#f88',\n                        trailColor: '#d6d6d6',\n                        backgroundColor: '#3e98c7',\n                        })}  \n                    />\n                </div>\n\n                <div className=\"flex items-center justify-center mt-6 space-x-4\">\n                  {isPaused? (\n                    <Button className=\"py-1 px-6\">\n                        Play\n                    </Button>\n                  )\n                  :\n                  (\n                    <Button className=\"py-1 px-6\">\n                        Pause\n                    </Button>\n                  )}\n                    \n                </div>\n            </Card>\n        </>\n    )\n}\n\nexport default Time"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,mBAAmB,EAAEC,WAAW,QAAS,4BAA4B;AAC9E,OAAO,4CAA4C;AACnD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,IAAI,MAAM,kBAAkB;AAAC;AAAA;AAEpC,MAAMC,GAAG,GAAG,SAAS;AACrB,MAAMC,KAAK,GAAG,SAAS;AAEvB,MAAMC,IAAI,GAAG,QAAmD;EAAA;EAAA,IAAlD;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAU,CAAC;EAEvD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACkB,IAAI,EAAEC,OAAO,CAAC,GAAGnB,QAAQ,CAAC,MAAM,CAAC;EACxC,MAAMoB,cAAc,GAAGlB,MAAM,CAACc,WAAW,CAAC;EAC1C,MAAMK,WAAW,GAAGnB,MAAM,CAACY,QAAQ,CAAC;EACpC,MAAMQ,OAAO,GAAGpB,MAAM,CAACgB,IAAI,CAAC;EAG5B,SAASK,IAAI,GAAE;IACXH,cAAc,CAACI,OAAO,EAAE;IACxBP,cAAc,CAACG,cAAc,CAACI,OAAO,CAAC;EAC1C;EAEA,MAAMC,SAAS,GAAG,MAAM;IACpBR,cAAc,CAACP,OAAO,GAAC,EAAE,CAAC;EAC9B,CAAC;EAED,MAAMgB,UAAU,GAAG,MAAM;IACrB,MAAMC,QAAQ,GAAGL,OAAO,CAACE,OAAO,KAAK,MAAM,GAAE,OAAO,GAAE,MAAM;IAC5D,MAAMI,WAAW,GAAG,CAACD,QAAQ,KAAI,MAAM,GAAGjB,OAAO,GAAGC,QAAQ,IAAE,EAAE;IAChEQ,OAAO,CAACQ,QAAQ,CAAC;IACjBL,OAAO,CAACE,OAAO,GAAGG,QAAQ;IAC1BV,cAAc,CAACW,WAAW,CAAC;IAC3BR,cAAc,CAACI,OAAO,GAAGI,WAAW;EACxC,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZwB,SAAS,EAAE;IAEX,MAAMI,QAAQ,GAAGC,WAAW,CAAC,MAAI;MAC7B,IAAGT,WAAW,CAACG,OAAO,EAAE;QACpB;MACJ;MAEA,IAAGJ,cAAc,CAACI,OAAO,KAAK,CAAC,EAAC;QAC7B,OAAOE,UAAU,EAAE;MACtB;MAEAH,IAAI,EAAE;MACNQ,OAAO,CAACC,GAAG,CAACT,IAAI,EAAE,CAAC;MACnBQ,OAAO,CAACC,GAAG,CAACZ,cAAc,CAACI,OAAO,CAAC;IACvC,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMS,aAAa,CAACJ,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACnB,OAAO,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,CAAC,CAAC;EAEhD,MAAMqB,YAAY,GAAGhB,IAAI,KAAK,MAAM,GAAER,OAAO,GAAC,EAAE,GAAGC,QAAQ,GAAC,EAAE;EAC9D,MAAMwB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACrB,WAAW,GAACkB,YAAY,CAAC,GAAC,GAAG;EAE3D,MAAMI,OAAO,GAAGF,IAAI,CAACG,KAAK,CAACvB,WAAW,GAAC,EAAE,CAAC;EAC1C,IAAIwB,OAAO,GAAGxB,WAAW,GAAC,EAAE;EAC5B,IAAGwB,OAAO,GAAC,EAAE,EAAE;IACXA,OAAO,GAAE,GAAG,GAAGA,OAAO;EAC1B;EAEAT,OAAO,CAACC,GAAG,CAACM,OAAO,EAACE,OAAO,CAAC;EAG5B,oBACI;IAAA,uBACI,QAAC,IAAI;MAAA,wBACD;QAAA,uBACI,QAAC,mBAAmB;UAChB,KAAK,EAAEL;UACP;UAAA;UACA,IAAI,EAAEG,OAAO,GAAC,GAAG,GAACE,OAAQ;UAC1B,MAAM,EAAEpC,WAAW,CAAC;YAEpBqC,QAAQ,EAAE,GAAG;YACbC,aAAa,EAAE,MAAM;YACrBC,sBAAsB,EAAE,GAAG;YAC3BC,SAAS,EAAErC,GAAG;YACdsC,SAAS,EAAE,MAAM;YACjBC,UAAU,EAAE,SAAS;YACrBC,eAAe,EAAE;UACjB,CAAC;QAAE;UAAA;UAAA;UAAA;QAAA;MACL;QAAA;QAAA;QAAA;MAAA,QACA,eAEN;QAAK,SAAS,EAAC,iDAAiD;QAAA,UAC7DjC,QAAQ,gBACP,QAAC,MAAM;UAAC,SAAS,EAAC,WAAW;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAEpB,gBAIT,QAAC,MAAM;UAAC,SAAS,EAAC,WAAW;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAG9B;QAAA;QAAA;QAAA;MAAA,QAEG;IAAA;MAAA;MAAA;MAAA;IAAA;EACH,iBACR;AAEX,CAAC;AAAA,GAlGKL,IAAI;AAAA,KAAJA,IAAI;AAoGV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module"}